#labels Featured,Phase-Requirements,Phase-Design,Phase-Implementation
=概述=
Android开发框架提供了主题机制，可以让应用程序根据配置展示不同的外观。但依靠主题并不能实现完美的换肤，它有以下不足：（1）皮肤资源必须和主程序一起打包，增加了应用程序的体积，使得皮肤不能无限扩展，不能动态添加。（2）不能动态换肤。应用主题有两种方法，一是在manifest文件中配置，二是在activity创建之前通过代码设置。无法实现运行后动态选择皮肤。

SkinEngine项目的目标是开发一个简单易用的皮肤引擎，让android应用程序方便的实现换肤功能。和android主题机制类似，SkinEngine以样式属性资源的名字为标识，关联皮肤资源。但区别在于，SkinEngine关联的资源存在于主程序外部的独立apk包里，主程序不需要知道外部皮肤的存在；皮肤资源可以后续无限扩展，不需要预先打包在主程序中，不会增加主程序安装包大小。另外，SkinEngine支持运行时动态换肤。

=示例程序=
请先下载示例程序[http://android-skin-engine.googlecode.com/files/SkinEngineDemo.7z SkinEngineDemo]及其皮肤资源包程序[http://android-skin-engine.googlecode.com/files/SkinEngineDemoSkin.7z SkinEngineDemoSkin]。
[http://android-skin-engine.googlecode.com/files/SkinEngineDemo.7z SkinEngineDemo]是一个简单的应用程序，使用了SkinEngine皮肤引擎库。[http://android-skin-engine.googlecode.com/files/SkinEngineDemoSkin.7z SkinEngineDemoSkin]是它的皮肤工程，皮肤资源打包在`SkinEngineDemoSkin.apk`中。

1、将编译打包好的皮肤资源包`SkinEngineDemoSkin.apk`放在`“/mnt/sdcard/SkinEngineDemo/”`目录下。

2、运行[http://android-skin-engine.googlecode.com/files/SkinEngineDemo.7z SkinEngineDemo]，它有3个页面，可以先简单浏览、点击各个页面的控件，看看程序外观展示。

http://android-skin-engine.googlecode.com/files/SkinEngineDemoScreenshot-0.png

http://android-skin-engine.googlecode.com/files/SkinEngineDemoScreenshot-1.png

3、进行换肤。从主页面点击跳转到页面1，点击换肤按钮，会从`SkinEngineDemoSkin.apk`中获取皮肤资源，执行换肤操作。可以看到[http://android-skin-engine.googlecode.com/files/SkinEngineDemo.7z SkinEngineDemo]程序的外观发生改变（无论是以后新打开的页面还是换肤以前已经存在的页面），按钮按下态、字体、图片、复选框、列表按下态等从原程序的蓝色调资源改变为皮肤包里绿色调的资源。

http://android-skin-engine.googlecode.com/files/SkinEngineDemoSkinScreenshot-0.png

http://android-skin-engine.googlecode.com/files/SkinEngineDemoSkinScreenshot-1.png

=使用方法=

1、编写你的android应用程序，在布局文件中以赋值为样式属性(style attributes)的方式标识需要进行换肤的控件的属性，定义好相关的主题、属性，确保你的程序可以正常运行。例如：

{{{
            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="textColorTheme"
                android:textColor="?textColorTheme" />
}}}

2、编写皮肤资源包程序，把皮肤资源按照正常android应用程序结构组织。主程序将主题中定义的样式属性名字为映射依据，找到皮肤资源程序里的主题中定义样式属性的值，作为替换皮肤资源。

3、主程序引用皮肤引擎库[http://android-skin-engine.googlecode.com/files/SkinEngine.jar SkinEngine.jar]。

4、在主程序启动时（一般是在Application子类里），初始化皮肤引擎SkinEngine。如果主程序主题里定义了控件的默认样式，并且这些默认样式的property有被赋值为style attributes的，则需要调用addWidgetDefaultStyleAttr函数告知皮肤引擎。

{{{
		// init the skin engine
		SkinEngine skinEngine = SkinEngine.getInstance();
		skinEngine.init(this, R.styleable.AppTheme);

		// add custom default widget styles
		skinEngine.addWidgetDefaultStyleAttr("Button", "background", R.attr.bg_btn);
		skinEngine.addWidgetDefaultStyleAttr("Button", "textColor", R.attr.textColorPrimary);
		skinEngine.addWidgetDefaultStyleAttr("CheckBox", "button", R.attr.cb_selector);
		skinEngine.addWidgetDefaultStyleAttr("ListView", "listSelector", R.attr.bg_list);
}}}

5、让主程序的activity继承自皮肤引擎公开的`SkinWrapperActivity`类。一般来说，应用程序都会有自己的页面基类`BaseActivity`，那么，让它继承`SkinWrapperActivity`即可。

6、如果某个activity会在换肤动作发生前就存在，并且在换肤事件发生后，需要即时响应更改外观的（通常是在软件里通往换肤触发页面的路径上的`activity`），则需要在该`activity`的`onCreate`方法中调用以下方法。

{{{
enableResponseOnSkinChangeEvent(true);
}}}

7、在主程序里设计换肤功能触发入口，在该处调用换肤函数实现换肤。

{{{
SkinEngine.getInstance().setSkinApk(apkPath);
}}}

*相关方法的说明见文档[http://android-skin-engine.googlecode.com/files/doc.7z doc]*


=后续将会完善=
1、支持的style property完善补全。（目前只支持以下属性View的background，`TextView`的textColor、textSize、button，`ListView`的divider、listSelector，`ImageView`的src。）
2、考虑支持自定义控件的方案。
3、支持代码动态添加换肤的“控件-属性-资源标识”。